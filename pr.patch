From 4a4dc6b003a356bf9283852a0f58f5e9a59018c7 Mon Sep 17 00:00:00 2001
From: Codex <codex@openai.com>
Date: Tue, 19 Aug 2025 20:08:49 +0000
Subject: [PATCH] backlog: repair seeder (ruff-clean, idempotent, correct
 workflow if)

---
 .github/workflows/seed_backlog.yml |  32 ++++++
 scripts/seed_backlog.py            | 162 ++++++++++++++++++++++++-----
 2 files changed, 168 insertions(+), 26 deletions(-)
 create mode 100644 .github/workflows/seed_backlog.yml

diff --git a/.github/workflows/seed_backlog.yml b/.github/workflows/seed_backlog.yml
new file mode 100644
index 0000000..1ea8c0f
--- /dev/null
+++ b/.github/workflows/seed_backlog.yml
@@ -0,0 +1,32 @@
+name: Seed Backlog
+on:
+  workflow_dispatch:
+    inputs:
+      apply:
+        description: "Create/update issues for real (unchecked = dry-run)"
+        required: false
+        default: "false"
+jobs:
+  seed:
+    runs-on: ubuntu-latest
+    permissions:
+      contents: read
+      issues: write
+    steps:
+      - uses: actions/checkout@v4
+      - uses: actions/setup-python@v5
+        with:
+          python-version: "3.11"
+      - run: pip install -r requirements.txt
+      - name: Dry run
+        if: github.event.inputs.apply != 'true'
+        env:
+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
+          GITHUB_REPOSITORY: ${{ github.repository }}
+        run: python scripts/seed_backlog.py
+      - name: Apply (create/update issues)
+        if: github.event.inputs.apply == 'true'
+        env:
+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
+          GITHUB_REPOSITORY: ${{ github.repository }}
+        run: python scripts/seed_backlog.py --apply
diff --git a/scripts/seed_backlog.py b/scripts/seed_backlog.py
index 0188e79..2806f5c 100644
--- a/scripts/seed_backlog.py
+++ b/scripts/seed_backlog.py
@@ -1,39 +1,149 @@
-# Stub for seeding GitHub issues from /wbs/*.yaml
-# Usage: python scripts/seed_backlog.py --dry-run
 import argparse
-import json
-import pathlib
+import os
+import sys
+from typing import Dict, List, Optional
 
 import yaml
+from github import Github
 
 
-ROOT = pathlib.Path(__file__).resolve().parents[1]
+ISSUE_TITLE_FMT = "[{wp}] {id} — {title}"
+LABEL_COLOR = "0366d6"  # WP labels
 
 
-def main() -> None:
-    ap = argparse.ArgumentParser()
-    ap.add_argument("--dry-run", action="store_true")
-    args = ap.parse_args()
+def load_yaml(path: str):
+    with open(path, "r", encoding="utf-8") as f:
+        return yaml.safe_load(f) or {}
 
-    w = yaml.safe_load((ROOT / "wbs" / "wbs.yaml").read_text(encoding="utf-8"))
-    owners = yaml.safe_load((ROOT / "wbs" / "owners.yaml").read_text(encoding="utf-8"))
-    out = []
-    for wp, items in (w.get("wbs") or {}).items():
+
+def ensure_label(repo, name: str, color: str = LABEL_COLOR):
+    try:
+        return repo.get_label(name)
+    except Exception:
+        return repo.create_label(
+            name=name, color=color, description=f"Work Package {name}"
+        )
+
+
+def owner_to_username(raw: Optional[str]) -> Optional[str]:
+    if not raw:
+        return None
+    # Accept '@user' or 'user'
+    return raw.lstrip("@").strip() or None
+
+
+def find_issue_by_wbs_id(gh: Github, repo_full: str, wbs_id: str):
+    # Search across open+closed issues by exact WBS token in title
+    query = f'repo:{repo_full} is:issue in:title "{wbs_id}"'
+    for item in gh.search_issues_and_pull_requests(query):
+        return item  # first match
+    return None
+
+
+def build_body(item: Dict) -> str:
+    due = item.get("due")
+    due_str = str(due) if due else "—"
+    owner = item.get("owner", "—")
+    acceptance = item.get("acceptance") or []
+    acc_lines = "\n".join(f"- {a}" for a in acceptance) or "- (not specified)"
+    return (
+        f"**WBS ID:** {item['id']}\n"
+        f"**Due:** {due_str}\n"
+        f"**Owner (role):** {owner}\n\n"
+        f"### Acceptance Criteria\n{acc_lines}\n"
+    )
+
+
+def create_or_update_issue(
+    gh: Github,
+    repo,
+    repo_full: str,
+    wp: str,
+    item: Dict,
+    assignee_username: Optional[str],
+    dry_run: bool,
+) -> Dict:
+    title = ISSUE_TITLE_FMT.format(wp=wp, id=item["id"], title=item["title"])
+    body = build_body(item)
+
+    existing = find_issue_by_wbs_id(gh, repo_full, item["id"])
+    if existing:
+        number = existing.number
+        if dry_run:
+            return {"action": "update(dry)", "number": number, "title": title}
+        issue = repo.get_issue(number=number)
+        issue.edit(title=title, body=body)
+        if assignee_username:
+            try:
+                issue.add_to_assignees(assignee_username)
+            except Exception:
+                pass
+        ensure_label(repo, wp)
+        try:
+            issue.add_to_labels(wp)
+        except Exception:
+            pass
+        return {"action": "update", "number": number, "title": title}
+
+    if dry_run:
+        return {"action": "create(dry)", "title": title}
+
+    issue = repo.create_issue(
+        title=title, body=body, assignee=assignee_username or None
+    )
+    ensure_label(repo, wp)
+    try:
+        issue.add_to_labels(wp)
+    except Exception:
+        pass
+    return {"action": "create", "number": issue.number, "title": title}
+
+
+def main(argv=None):
+    ap = argparse.ArgumentParser(description="Seed/update GitHub issues from WBS")
+    ap.add_argument(
+        "--apply",
+        action="store_true",
+        help="Actually create/update issues (default: dry-run)",
+    )
+    args = ap.parse_args(argv)
+
+    token = os.getenv("GITHUB_TOKEN")
+    repo_full = os.getenv("GITHUB_REPOSITORY")
+    if not token or not repo_full:
+        print("Missing GITHUB_TOKEN or GITHUB_REPOSITORY", file=sys.stderr)
+        sys.exit(2)
+
+    gh = Github(token)
+    repo = gh.get_repo(repo_full)
+
+    root = os.path.dirname(os.path.abspath(__file__))  # scripts/
+    root = os.path.dirname(root)  # project root
+
+    wbs = load_yaml(os.path.join(root, "wbs", "wbs.yaml"))
+    owners = load_yaml(os.path.join(root, "wbs", "owners.yaml"))
+
+    results: List[Dict] = []
+    for wp, items in (wbs.get("wbs") or {}).items():
         for it in items:
-            due = it.get("due")
-            out.append(
-                {
-                    "title": f"[{wp}] {it['id']} — {it['title']}",
-                    "labels": [wp],
-                    "assignee": owners.get(it.get("owner", ""), ""),
-                    "due": str(due) if due else None,
-                    "body": f"WBS ID: {it['id']}\nDue: {due}\nOwner: {it.get('owner')}",
-                }
+            role = it.get("owner")
+            assignee = owner_to_username(owners.get(role)) if role else None
+            results.append(
+                create_or_update_issue(
+                    gh=gh,
+                    repo=repo,
+                    repo_full=repo_full,
+                    wp=wp,
+                    item=it,
+                    assignee_username=assignee,
+                    dry_run=(not args.apply),
+                )
             )
-    if args.dry_run:
-        print(json.dumps(out, indent=2, ensure_ascii=False))
-    else:
-        print("Non-dry-run mode not implemented yet.")
+
+    print("Backlog seeding summary:")
+    for r in results:
+        number = f"#{r['number']}" if "number" in r else ""
+        print(f"- {r['action']} {number} {r['title']}")
 
 
 if __name__ == "__main__":
-- 
2.43.0

